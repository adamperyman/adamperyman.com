{"version":3,"sources":["../../src/server/logger.js"],"names":["isProduction","process","env","NODE_ENV","MAX_LOG_FILE_SIZE","MAX_LOG_FILES","LOG_FILE_NAME","LOG_FILE_PATH","join","__dirname","LOG_LEVEL","logger","transports","Console","level","colorize","timestamp","prettyPrint","File","filename","handleExceptions","humanReadableUnhandledException","maxSize","maxFiles","json","expressMiddleware","req","res","next","url","includes","ip","headers","connection","remoteAddress","defaultMessage","method","startTimeStamp","Date","now","waitTimePrintInterval","waitingTime","intervalId","setInterval","verbose","printExecutionTime","statusCode","message","info","warn","clearInterval","on"],"mappings":"oGAAA;AACA;AACA,kC;;AAEA,IAAMA,eAAeC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA9C;;AAEA,IAAMC,oBAAoB,KAAK,IAAL,GAAY,IAAtC;AACA,IAAMC,gBAAgB,EAAtB;;AAEA,IAAMC,gBAAgB,kBAAtB;;AAEA,IAAMC,gBAAgBP;AAClB,cAAKQ,IAAL,CAAU,kBAAV,EAAqBF,aAArB,CADkB;AAElB,cAAKE,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiCH,aAAjC,CAFJ;;AAIA,IAAMI,YAAYT,QAAQC,GAAR,CAAYQ,SAAZ,KAA0BV,eAAe,SAAf,GAA2B,OAArD,CAAlB;;AAEA,IAAMW,SAAS,oBAAW;AACxBC,cAAY;AACV,MAAI,oBAAWC,OAAf,CAAuB;AACrBC,WAAOJ,SADc;AAErBK,cAAU,IAFW;AAGrBC,eAAW,IAHU;AAIrBC,iBAAa,IAJQ,EAAvB,CADU;;AAOV,MAAI,oBAAWC,IAAf,CAAoB;AAClBJ,WAAOJ,SADW;AAElBS,cAAUZ,aAFQ;AAGlBa,sBAAkB,IAHA;AAIlBC,qCAAiC,IAJf;AAKlBJ,iBAAa,IALK;AAMlBK,aAASlB,iBANS;AAOlBmB,cAAUlB,aAPQ;AAQlBmB,UAAM,KARY,EAApB,CAPU,CADY,EAAX,CAAf;;;;;AAqBAb,OAAOc,iBAAP,GAA2B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAIF,IAAIG,GAAJ,CAAQC,QAAR,CAAiB,WAAjB,KAAiC,CAAC9B,YAAtC,EAAoD;AAClD,WAAO4B,MAAP;AACD;;AAED,MAAMG,KAAKL,IAAIM,OAAJ,CAAY,iBAAZ,KAAkCN,IAAIO,UAAJ,CAAeC,aAA5D;AACA,MAAMC,2BAAoBJ,EAApB,gBAA4BL,IAAIU,MAAhC,cAA0CV,IAAIG,GAA9C,CAAN;;AAEA,MAAMQ,iBAAiBC,KAAKC,GAAL,EAAvB;AACA,MAAMC,wBAAwB,IAA9B;;AAEA,MAAIC,cAAc,CAAlB;;AAEA,MAAMC,aAAaC,YAAY,YAAM;AACnCF,mBAAeD,qBAAf;;AAEA7B,WAAOiC,OAAP,WAAkBT,cAAlB,yBAA+CM,cAAc,IAA7D;AACD,GAJkB,EAIhBD,qBAJgB,CAAnB;;AAMA,MAAMK,qBAAqB,SAArBA,kBAAqB,GAAqB,KAApBC,UAAoB,uEAAP,EAAO;AAC9C,QAAMC,oBAAaZ,cAAb,gBAAiCW,UAAjC,gBAAiD,CAACR,KAAKC,GAAL,KAAaF,cAAd,IAAgC,IAAjF,MAAN;;AAEA,QAAIV,IAAImB,UAAJ,GAAiB,GAArB,EAA0B;AACxBnC,aAAOqC,IAAP,CAAYD,OAAZ;AACD,KAFD,MAEO;AACLpC,aAAOsC,IAAP,CAAYF,OAAZ;AACD;;AAEDG,kBAAcR,UAAd;AACD,GAVD;;AAYAhB,MAAIyB,EAAJ,CAAO,KAAP,EAAc,oBAAMN,mBAAmBlB,IAAImB,UAAvB,CAAN,EAAd;AACApB,MAAIyB,EAAJ,CAAO,OAAP,EAAgB,oBAAMN,mBAAmB,kBAAnB,CAAN,EAAhB;;AAEA,SAAOjB,MAAP;AACD,CAnCD;;AAqCAjB,OAAOqC,IAAP,qBAAyBzC,aAAzB,Q;;AAEeI,M,wKAzETX,Y,wEAEAI,iB,6EACAC,a,yEAEAC,a,yEAEAC,a,yEAIAG,S,qEAEAC,M","file":"logger.js","sourcesContent":["import path from 'path'\nimport { homedir } from 'os'\nimport { Logger, transports } from 'winston'\n\nconst isProduction = process.env.NODE_ENV === 'production'\n\nconst MAX_LOG_FILE_SIZE = 10 * 1024 * 1024\nconst MAX_LOG_FILES = 10\n\nconst LOG_FILE_NAME = '.application.log'\n\nconst LOG_FILE_PATH = isProduction\n  ? path.join(homedir(), LOG_FILE_NAME)\n  : path.join(__dirname, '..', '..', LOG_FILE_NAME)\n\nconst LOG_LEVEL = process.env.LOG_LEVEL || (isProduction ? 'verbose' : 'debug')\n\nconst logger = new Logger({\n  transports: [\n    new transports.Console({\n      level: LOG_LEVEL,\n      colorize: true,\n      timestamp: true,\n      prettyPrint: true\n    }),\n    new transports.File({\n      level: LOG_LEVEL,\n      filename: LOG_FILE_PATH,\n      handleExceptions: true,\n      humanReadableUnhandledException: true,\n      prettyPrint: true,\n      maxSize: MAX_LOG_FILE_SIZE,\n      maxFiles: MAX_LOG_FILES,\n      json: false\n    })\n  ]\n})\n\nlogger.expressMiddleware = (req, res, next) => {\n  if (req.url.includes('__webpack') && !isProduction) {\n    return next()\n  }\n\n  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n  const defaultMessage = `${ip} - ${req.method} ${req.url}`\n\n  const startTimeStamp = Date.now()\n  const waitTimePrintInterval = 5000\n\n  let waitingTime = 0\n\n  const intervalId = setInterval(() => {\n    waitingTime += waitTimePrintInterval\n\n    logger.verbose(`${defaultMessage} - wait for ${waitingTime / 1000}s..`)\n  }, waitTimePrintInterval)\n\n  const printExecutionTime = (statusCode = '') => {\n    const message = `${defaultMessage} - ${statusCode} - ${(Date.now() - startTimeStamp) / 1000}s`\n\n    if (res.statusCode < 400) {\n      logger.info(message)\n    } else {\n      logger.warn(message)\n    }\n\n    clearInterval(intervalId)\n  }\n\n  req.on('end', () => printExecutionTime(res.statusCode))\n  req.on('close', () => printExecutionTime('[closed by user]'))\n\n  return next()\n}\n\nlogger.info(`Log File: ${LOG_FILE_PATH}.`)\n\nexport default logger\n"]}